---
name: Linux / CPU dispatch full CTS

permissions:
  contents: read

on:
  workflow_dispatch:

env:
  CCACHE_BASEDIR: "${{ github.workspace }}"
  CCACHE_DIR: "${{ github.workspace }}/../../../ccache_storage"
  EXAMPLES_DIR: "${{ github.workspace }}/../../../examples"
  # full CTS launches thousands of tests, the compiler cache could grow to >10 GB -> avoid this
  POCL_KERNEL_CACHE: "0"

jobs:
  # jobs run on Github-hosted runners.
  # TODO: move more self-hosted to Github-hosted
  # unfortunately sanitizers don't work on Github-hosted runners,
  # probably some limitation of Virtual address space
  # (sanitizer-built binaries require >=20 terabytes of Virt AS)
  github_test_matrix:
    name: LLVM ${{ matrix.llvm }} - ${{ matrix.config }}
    # 24.04 brings in LLVM up to 18 + ocl-icd 2.3.x (OpenCL 3.0 compatible)
    runs-on: ubuntu-24.04
    timeout-minutes: 1600
    strategy:
      fail-fast: false
      matrix:
        # basic = simplest pthread build
        # devel = with devel options
        # install = install PoCL system-wide and run tests
        # static = statically linked LLVM component libraries
        # TBB, OpenMP = CPU drivers with TBB/OpenMP support
        # DBK = ONNX / libjpeg-turbo DBKs enabled
        llvm: [18]
        config: [cts_full]

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Load Env vars
        id: load-env
        run: |
          cat ${{ github.workspace }}/.github/variables.txt >> $GITHUB_ENV

      - name: Install prerequisites and ocl-icd
        run: >
          sudo apt update -y &&
          sudo apt install -y wget gpg python3-dev libpython3-dev build-essential ocl-icd-libopencl1 cmake make git pkg-config ocl-icd-libopencl1 ocl-icd-dev ocl-icd-opencl-dev libhwloc-dev zlib1g-dev libtbb-dev

      - name: Install LLVM <= 18
        if: ${{ matrix.llvm <= 18 }}
        run: >
          export LLVM_VERSION=${{ matrix.llvm }} &&
          sudo apt install -y libclang-cpp${LLVM_VERSION}-dev llvm-${LLVM_VERSION}-dev libclang-${LLVM_VERSION}-dev clang-${LLVM_VERSION} llvm-${LLVM_VERSION}

      - name: Install LLVM 19+
        if: ${{ matrix.llvm > 18 }}
        run: >
          export LLVM_VERSION=${{ matrix.llvm }} &&
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/llvm-snapshot.gpg &&
          echo "deb [signed-by=/usr/share/keyrings/llvm-snapshot.gpg] http://apt.llvm.org/noble/ llvm-toolchain-noble-${LLVM_VERSION} main" >/tmp/llvm.list &&
          sudo mv /tmp/llvm.list /etc/apt/sources.list.d/ &&
          sudo apt update -y &&
          sudo apt install -y libclang-cpp${LLVM_VERSION}-dev llvm-${LLVM_VERSION}-dev libclang-${LLVM_VERSION}-dev clang-${LLVM_VERSION} llvm-${LLVM_VERSION} mlir-${LLVM_VERSION}-tools libllvmlibc-${LLVM_VERSION}-dev

      - name: CMake
        id: cmake
        timeout-minutes: 60
        run: |
          rm -rf ${{ github.workspace }}/build
          mkdir ${{ github.workspace }}/build
          mkdir -p ${EXAMPLES_DIR}/build_${{ matrix.llvm }}_${{ matrix.config }}
          mkdir -p ${EXAMPLES_DIR}/source
          
          BUILD_FLAGS="-O1 -march=native -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable"
          cmake \
          -DDEVELOPER_MODE=ON -DENABLE_TESTSUITES=conformance -DENABLE_CONFORMANCE=ON \
          -DCMAKE_BUILD_TYPE=Release "-DCMAKE_C_FLAGS_RELEASE=$BUILD_FLAGS" "-DCMAKE_CXX_FLAGS_RELEASE=$BUILD_FLAGS" \
          -DWITH_LLVM_CONFIG=/usr/bin/llvm-config-${{ matrix.llvm }} \
          -DTESTSUITE_SOURCE_BASEDIR=${EXAMPLES_DIR}/source -DTESTSUITE_BASEDIR=${EXAMPLES_DIR}/build_${{ matrix.llvm }}_${{ matrix.config }} \
          -B ${{ github.workspace }}/build ${{ github.workspace }}

      - name: Run Build
        id: build
        timeout-minutes: 60
        run: |
          cd ${{ github.workspace }}/build && make -j$(nproc)
          cd ${{ github.workspace }}/build/examples/conformance && make -j$(nproc) conformance

      - name: Install PoCL
        id: install_pocl
        timeout-minutes: 5
        run: |
          # remove CTestCustom.cmake - it contains POCL_BUILDING and OCL_ICD_VENDORS incompatible with install config
          cd ${{ github.workspace }}/build && sudo make install && rm CTestCustom.cmake
          # remove the built libpocl.so library
          cd ${{ github.workspace }}/build/lib/CL && make clean

      - name: Run clInfo
        id: clinfo
        env:
          POCL_DEVICES: "basic" 
        timeout-minutes: 5
        run: |
          clinfo

      - name: Run Tests
        id: ctest
        env:
          POCL_DEVICES: "basic" 
          POCL_CACHE_DIR: "${{ runner.temp }}/GH_POCL_CACHE"
        run: |
          runCTest() {
            cd ${{ github.workspace }}/build/examples/conformance &&  ctest -j$(nproc) $CTEST_FLAGS "$@"
          }
          rm -rf ${{ env.POCL_CACHE_DIR }}
          mkdir ${{ env.POCL_CACHE_DIR }}
          if [ "${{ matrix.config }}" == "cts_full" ]; then
            runCTest -L conformance_suite_full_main
          else
            echo "Unknown configuration" && exit 1
          fi

      - name: Get CMake version
        id: cmake_version
        run: echo "version=$(cmake --version | head -n 1)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache CTest timings
        id: cache_ctest
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57
        with:
          path: ${{ github.workspace }}/build/Testing/Temporary/CTestCostData.txt
          key: ctest-cache-${{ steps.cmake_version.outputs.version }}-${{ runner.name }}-${{ matrix.config }}
