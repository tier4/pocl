---
name: Linux / CPU x86-64 on GH tests

permissions:
  contents: read

on:
  workflow_dispatch:

env:
  CCACHE_BASEDIR: "${{ github.workspace }}"
  CCACHE_DIR: "${{ github.workspace }}/../../../../ccache_storage"
  EXAMPLES_DIR: "${{ github.workspace }}/../../../../examples"

jobs:
  # jobs run on Github-hosted runners.
  # TODO: move more self-hosted to Github-hosted
  # unfortunately sanitizers don't work on Github-hosted runners,
  # probably some limitation of Virtual address space
  # (sanitizer-built binaries require >=20 terabytes of Virt AS)
  github_test_matrix:
    name: LLVM ${{ matrix.llvm }} - ${{ matrix.config }}
    # 24.04 brings in LLVM up to 18 + ocl-icd 2.3.x (OpenCL 3.0 compatible)
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        # basic = simplest pthread build
        # devel = with devel options
        # install = install PoCL system-wide and run tests
        # static = statically linked LLVM component libraries
        # TBB, OpenMP = CPU drivers with TBB/OpenMP support
        # DBK = ONNX / libjpeg-turbo DBKs enabled
        llvm: [19]
        config: [cts_full]

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Load Env vars
        id: load-env
        run: |
          cat ${{ github.workspace }}/.github/variables.txt >> $GITHUB_ENV

      - name: Install prerequisites and ocl-icd
        run: >
          sudo apt update -y &&
          sudo apt install -y wget gpg python3-dev libpython3-dev build-essential ocl-icd-libopencl1 cmake make git pkg-config ocl-icd-libopencl1 ocl-icd-dev ocl-icd-opencl-dev libhwloc-dev zlib1g-dev libtbb-dev

      - name: Install LLVM <= 18
        if: ${{ matrix.llvm <= 18 }}
        run: >
          export LLVM_VERSION=${{ matrix.llvm }} &&
          sudo apt install -y libclang-cpp${LLVM_VERSION}-dev llvm-${LLVM_VERSION}-dev libclang-${LLVM_VERSION}-dev clang-${LLVM_VERSION} llvm-${LLVM_VERSION} libllvmspirvlib-${LLVM_VERSION}-dev llvm-spirv-${LLVM_VERSION} libpolly-${LLVM_VERSION}-dev spirv-tools

      - name: Install LLVM 19+
        if: ${{ matrix.llvm > 18 }}
        run: >
          export LLVM_VERSION=${{ matrix.llvm }} &&
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/llvm-snapshot.gpg &&
          echo "deb [signed-by=/usr/share/keyrings/llvm-snapshot.gpg] http://apt.llvm.org/noble/ llvm-toolchain-noble-${LLVM_VERSION} main" >/tmp/llvm.list &&
          sudo mv /tmp/llvm.list /etc/apt/sources.list.d/ &&
          sudo apt update -y &&
          sudo apt install -y libclang-cpp${LLVM_VERSION}-dev llvm-${LLVM_VERSION}-dev libclang-${LLVM_VERSION}-dev clang-${LLVM_VERSION} llvm-${LLVM_VERSION} mlir-${LLVM_VERSION}-tools libllvmlibc-${LLVM_VERSION}-dev libpolly-${LLVM_VERSION}-dev spirv-tools

      - name: Install XSMM & ONNX & libjpeg-turbo
        if: ${{ matrix.config == 'DBKs' }}
        run: >
           sudo apt install -y libopenblas-dev &&
           sudo wget -q -O libjpeg-turbo.deb https://github.com/libjpeg-turbo/libjpeg-turbo/releases/download/3.0.4/libjpeg-turbo-official_3.0.4_amd64.deb &&
           sudo dpkg -i libjpeg-turbo.deb &&
           sudo wget -q -O /tmp/onnx-runtime.tgz https://github.com/microsoft/onnxruntime/releases/download/v1.19.2/onnxruntime-linux-x64-1.19.2.tgz &&
           sudo mkdir /opt/onnx && sudo tar -xf /tmp/onnx-runtime.tgz -C /opt/onnx --strip-components=1 &&
           sudo ln -s /opt/libjpeg-turbo/lib64 /opt/libjpeg-turbo/lib &&
           sudo ln -s /opt/onnx/lib /opt/onnx/lib64 &&
           sudo mv /opt/onnx/include /opt/onnxruntime && sudo mkdir /opt/onnx/include && sudo mv /opt/onnxruntime /opt/onnx/include/ &&
           sudo bash -c 'mkdir /opt/source && cd /opt/source && git clone https://github.com/libxsmm/libxsmm.git && cd libxsmm && echo "unstable-1.17.1" > version.txt && make -j3 STATIC=0 FORTRAN=0 AVX=2 install DESTDIR=/opt/xsmm'

      - name: Run Build
        id: build
        timeout-minutes: 60
        run: |
          cd ${{ github.workspace }}/build && make -j$(nproc) && make -j$(nproc) prepare_examples

      - name: Build CTS Examples
        id: build_cts_examples
        # occasionally git timeouts on git clone of the examples
        timeout-minutes: 60
        if: ${{ matrix.config == 'cts_spirv' || matrix.config == 'tier1' }}
        run: |
          cd ${{ github.workspace }}/build/examples/conformance && make -j$(nproc) conformance

      - name: Run Tests
        id: ctest
        env:
          POCL_CACHE_DIR: "${{ runner.temp }}/GH_POCL_CACHE"
        run: |
          runCTest() {
            cd ${{ github.workspace }}/build &&  ctest -j$(nproc) $CTEST_FLAGS "$@"
          }
          rm -rf ${{ env.POCL_CACHE_DIR }}
          mkdir ${{ env.POCL_CACHE_DIR }}
          if [ "${{ matrix.config }}" == "cts_full" ]; then
            runCTest -L conformance_suite_full_main
          elif [ "${{ matrix.config }}" == "cts_full_spirv" ]; then
            runCTest -L conformance_suite_full_spirv
          else
            echo "Unknown configuration" && exit 1
          fi

      - name: Get CMake version
        id: cmake_version
        run: echo "version=$(cmake --version | head -n 1)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache CTest timings
        id: cache_ctest
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57
        with:
          path: ${{ github.workspace }}/build/Testing/Temporary/CTestCostData.txt
          key: ctest-cache-${{ steps.cmake_version.outputs.version }}-${{ runner.name }}-${{ matrix.config }}
